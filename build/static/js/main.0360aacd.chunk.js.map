{"version":3,"sources":["firebase.js","VideoFooter.jsx","VideoSideBar.jsx","Video.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","VideoFooter","channel","description","song","className","mode","index","src","alt","VideoSideBar","likes","shares","comments","useState","liked","setLiked","fontSize","onClick","e","Video","url","messages","playing","setPlaying","videoRef","useRef","loop","ref","console","log","current","pause","play","App","videos","setVideos","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","video","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0360aacd.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCUSTl06fpVDS2fCePwPv5A_8rOI8Z_6HI\",\r\n    authDomain: \"aakash-159a2.firebaseapp.com\",\r\n    databaseURL: \"https://aakash-159a2.firebaseio.com\",\r\n    projectId: \"aakash-159a2\",\r\n    storageBucket: \"aakash-159a2.appspot.com\",\r\n    messagingSenderId: \"447529889751\",\r\n    appId: \"1:447529889751:web:6ad80f4172dff990d5a592\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import React  from 'react';\r\nimport './VideoFooter.css';\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport Ticker from 'react-ticker';\r\n\r\n// class VideoFooter extends Component {\r\n//     state = {  }\r\n//     render() { \r\n//         return ( \r\n//             <div className=\"videofooter\">\r\n//                 <div className=\"videofooter_text\">\r\n//                     <h3>@aakash</h3>\r\n//                     <p>This is the description</p>\r\n//                     <div className=\"videofooter_ticker\">\r\n//                     <MusicNoteIcon className=\"videofooter_icon\"/>\r\n//                     <Ticker mode=\"smooth\">\r\n//                         {({index}) => (\r\n//                             <>\r\n//                             <p>The name of this record is here.</p>\r\n//                             </>\r\n//                         )}\r\n//                     </Ticker>\r\n//                     </div>\r\n//                 </div>\r\n//                 <img className=\"videofooter_record\" src={process.env.PUBLIC_URL + \"/disc.png\"} alt=\"\"/>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\nconst VideoFooter = ({channel, description,song}) => {\r\n    return ( \r\n        <div className=\"videofooter\">\r\n                <div className=\"videofooter_text\">\r\n                    <h3>@{channel}</h3>\r\n                    <p>{description}</p>\r\n                    <div className=\"videofooter_ticker\">\r\n                    <MusicNoteIcon className=\"videofooter_icon\"/>\r\n                    <Ticker mode=\"smooth\">\r\n                        {({index}) => (\r\n                            <>\r\n                            <p>{song}</p>\r\n                            </>\r\n                        )}\r\n                    </Ticker>\r\n                    </div>\r\n                </div>\r\n                <img className=\"videofooter_record\" src={process.env.PUBLIC_URL + \"/disc.png\"} alt=\"\"/>\r\n            </div>\r\n    );\r\n}\r\n \r\nexport default VideoFooter;","import React, { useState } from 'react';\r\nimport './VideoSideBar.css'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\n\r\n\r\nfunction VideoSideBar({likes, shares, comments}){\r\n    const [liked, setLiked] = useState(false);\r\n\r\n    return (\r\n        <div className=\"videoSideBar\" >\r\n            <div className=\"videoSidebar_button\">\r\n                {liked ? \r\n                (<FavoriteIcon fontSize=\"large\" onClick={(e) => setLiked(false)} />\r\n                ) : (\r\n                <FavoriteBorderIcon fontSize=\"large\" onClick={(e) => setLiked(true)} />\r\n                )}\r\n                <p>{liked ? likes+1 : likes}</p>\r\n            </div>\r\n            {/* <div className=\"videoSidebar_button\">\r\n                <FavoriteIcon/>\r\n                <p>300</p>\r\n            </div>\r\n            <div className=\"videoSidebar_button\">\r\n                <FavoriteBorderIcon/>\r\n                <p>230</p>\r\n            </div> */}\r\n            <div className=\"videoSidebar_button\">\r\n                <MessageIcon fontSize=\"large\"/>\r\n                <p>{comments}</p>\r\n            </div>\r\n            <div className=\"videoSidebar_button\">\r\n                <ShareIcon fontSize=\"large\"/>\r\n                <p>{shares}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default VideoSideBar;","import React, {useRef , useState} from 'react';\r\nimport VideoFooter from './VideoFooter';\r\nimport VideoSideBar from './VideoSideBar';\r\nimport './Video.css';\r\n\r\nfunction Video({url,channel,description,song,likes,messages,shares}){\r\n    const [playing , setPlaying] = useState(false);\r\n    const videoRef = useRef(null);\r\n\r\n    const onVideoPress = () => {\r\n        console.log(playing);\r\n        if(playing){\r\n            videoRef.current.pause();\r\n            setPlaying(false);\r\n        }\r\n        else {\r\n            videoRef.current.play();\r\n            setPlaying(true);\r\n        }\r\n    };\r\n\r\n    return ( \r\n        <div className=\"video\">\r\n            <video \r\n                className=\"video_player\" \r\n                loop\r\n                // controls\r\n                ref={videoRef}\r\n                onClick={onVideoPress}\r\n                src={url}>\r\n            </video>\r\n            <VideoFooter channel={channel} description={channel} song={song} />\r\n            <VideoSideBar likes={likes} shares={shares} comments={messages} />\r\n            {/* Video Footer */}\r\n            {/* Video Sidebar */}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Video;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport db from './firebase';\nimport Video from './Video';\n// Project Console: https://console.firebase.google.com/project/aakash-159a2/overview\n// Hosting URL: https://aakash-159a2.web.app\n// Clever programmer let's build TikTok Clone with ReactJS - firebase init , npm run build , firebase deploy\n// if npm gives errors use npm cache clean --force\n// Instead of adding the config file I added the automatic stuff from firebase\n// To use material UI run : npm install @material-ui/core\n// We should use axios to pull videos from the database\n// dummy link :- \"https://v16m.tiktokcdn.com/5666f29c57e4ff13d85e57a844c11884/5f28f434/video/tos/useast2a/tos-useast2a-pve-0068/2b2eb05b46aa4ee5bf6c5510e69eaa2f/?a=1233&amp;br=2484&amp;bt=1242&amp;cr=0&amp;cs=0&amp;dr=0&amp;ds=3&amp;er=&amp;l=20200802053756010190185152359E5A25&amp;lr=tiktok_m&amp;mime_type=video_mp4&amp;qs=0&amp;rc=amVqOGVsbzozdjMzaTczM0ApNTozZmlpNDw5NzQ7OjxlaGdyYC1nbmNuNWRfLS0xMTZzcy42MV4yLjFeNWIxYDUtL146Yw%3D%3D&amp;vl=&amp;vr=\"\nfunction App() {\n\n  const [videos, setVideos] = useState([]);\n\n  useEffect(() => {\n    //fires once when the component loads and whenever video changes\n    db.collection('videos').onSnapshot(snapshot => \n      (setVideos(snapshot.docs.map(doc => doc.data()))))\n  },[]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"app_videos\">\n        {videos.map(video => (\n        <Video \n          url={video.url}\n          channel={video.channel}\n          description={video.description}\n          song={video.song}\n          likes={video.likes}\n          messages={video.messages}\n          shares={video.shares}\n        />))}\n      </div>\n    </div>\n  );\n} \n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n  // document.getElementById('message')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}